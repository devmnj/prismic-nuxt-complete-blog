__NUXT_JSONP__("/blog/how-to-use-prismic-slices-in-nuxtjs", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {data:[{document:{id:"YNQVZRIAACwAcdkV",uid:"how-to-use-prismic-slices-in-nuxtjs",url:a,type:"post_type",href:"https:\u002F\u002Fjsuu.cdn.prismic.io\u002Fapi\u002Fv2\u002Fdocuments\u002Fsearch?ref=YNa7LRIAACoAUJV-&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22YNQVZRIAACwAcdkV%22%29+%5D%5D",tags:[],first_publication_date:"2021-06-24T06:02:53+0000",last_publication_date:"2021-06-24T06:23:49+0000",slugs:["prismic-slices-in-nuxtjs"],linked_documents:[],lang:k,alternate_languages:[],data:{title:[{type:f,text:"Prismic slices in Nuxtjs",spans:[]}],post_excerpt:[{type:b,text:"How to use Prismic slices in Nuxtjs",spans:[]}],featured_img_link:{link_type:j,url:"https:\u002F\u002Fimages.prismic.io\u002Fkoredana\u002F76d109e9-2795-4ade-80ef-8ed52a850303_nuxtjs-prismic.png?auto=compress,format&rect=0,43,980,613&w=800&h=500"},categories:{id:"YM218hIAACsAUUgF",type:"post_category",tags:[],slug:"nuxt",lang:k,uid:"nuxt-vuejs-development",link_type:l,isBroken:false},sticky_post:true,body:[{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Prismic",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Prismic is a Headless CMS which is a cloud based service and allow non developers easily manage content of the websites and apps and for developers it is easy to build the UI with editable content. For more information about awesome Prismic features visit Prismic.io",spans:[{start:256,end:266,type:m,data:{link_type:j,url:"https:\u002F\u002Fprismic.io\u002F"}}]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Slices",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Prismic slices are optional components such as paragraph, images etc. It is more like block in WordPress block editor, there are more chocolates inside, lol",spans:[{start:47,end:70,type:i},{start:95,end:117,type:d}]},{type:b,text:"By default the UI of your app may not render slice automatically. We are discussing a Nuxt project that render slices. Our Task is to render the slices in the index page  ",spans:[]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Dependecies",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Install the necessary dependencies require for the working of slices. ",spans:[]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:"npm i vue-slicezone\nnpm i nuxt-sm",spans:[]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Vue-slice-zone",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"vue-sllicezone library will help us to render the necessary slices for us . For rendering we need a slice components. To specify the location of our Slices we need file called sm.json in the root with following content ",spans:[{start:176,end:183,type:d}]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:"\u002F\u002Fsm.json\n{\"libraries\": [\"@\u002Fslices\", \"vue-essential-slices\"]}\r\n",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"The vue-slicezone component will look for the slices folder for matching the snake_cased slices against PascalCased component . You can name the slices folder as you wish and must include in the libraries array of sm.json",spans:[{start:77,end:89,type:d},{start:104,end:n,type:d},{start:195,end:205,type:d},{start:214,end:221,type:d}]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Create Text Slice",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Suppose you have a simple text_slice component in prismic. Create a TextSlice.vue with following code.",spans:[{start:o,end:p,type:i},{start:o,end:p,type:d}]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:"\u002F\u002Fslices\u002FTextSlice.vue\n\u003Ctemplate\u003E\r\n  \u003Cdiv\u003E\r\n     \u003Cprismic-rich-text :field=\"slice.primary.ritch_text_field\" \u002F\u003E\r\n  \u003C\u002Fdiv\u003E\r\n\u003C\u002Ftemplate\u003E\r\n\r\n\u003Cscript\u003E\r\nexport default {\r\nname:'TextSlice',\r\n  props: {\r\n    slice: Object,\r\n  },\r\n};\r\n\u003C\u002Fscript\u003E",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Add an index.js file to the slice folder",spans:[]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:"\u002F\u002Fslices\u002Findex.js\nimport\r\nTextSlice from '.\u002FTextSlice.vue'\r\n\nexport {\r\n  TextSlice,\r\n  }",spans:[]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:f,text:"Lets render slices",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Before beginning make sure that all slices in the current document (prismic.io) have PascalCased slices, otherwise it will end with an error.",spans:[]},{type:b,text:"What we need now ? ",spans:[]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:q,text:l,spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"A document that is already fetched using $prismic object which contain the slices object array, usually stored in a body object.",spans:[{start:41,end:49,type:d},{start:n,end:r,type:d},{start:127,end:r,type:i}]}]}},{slice_type:e,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:q,text:"SliceZone component",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"The slice-zone component can be added using the import statement and can include in the template section as follows.",spans:[]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:"\u003Ctemplate\u003E\n....\n\u003Cslice-zone class=\"subtitle\" \n:slices=\"page.data.body\" \n:resolver=\"resolver\" \u002F\u003E\r\n\n\u003C\u002Ftemplate\u003E\n\nimport SliceZone from \"vue-slicezone\";\n...\ncomponents: {\r\n    SliceZone,\r\n  },",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Since we are using Vue component , we need to setup component manually. The resolver method will instruct slice-zone which component to render. This also help us to specify only a few components  to render by passing as an array. ",spans:[{start:76,end:s,type:d},{start:144,end:228,type:i}]},{type:b,text:"In our case we have only one component, so need not go through the array option. Just import them all",spans:[{start:67,end:79,type:i}]},{type:b,text:"",spans:[]}]}},{slice_type:g,slice_label:a,items:[{}],primary:{cod_text_field:[{type:h,text:".....\nimport * as Slices from \"@\u002Fslices\";\r\n....\nmethods: {\r\n    resolver({ sliceName, slice, i }) {\r\n      return Slices[sliceName];\r\n    },\r\n  },",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"And that's all. Have a question ? leave it in comment. ",spans:[]},{type:b,text:"While I have the entire blogging platform done in Nuxt and Prismic and have a look @ GitHub",spans:[{start:s,end:91,type:m,data:{link_type:j,url:"https:\u002F\u002Fhttps:\u002F\u002Fgithub.com\u002Fmanojap\u002Fprismic-nuxt-complete-blog"}}]}]}}]}}}],fetch:{},mutations:[]}}(null,"paragraph","paragraph_slice","strong","heading_slice","heading1","code_slice","preformatted","em","Web","en-us","Document","hyperlink",116,25,36,"heading2",128,85)));