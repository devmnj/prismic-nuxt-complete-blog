__NUXT_JSONP__("/blog/setup-graphql-api-in-react-next", (function(a,b,c,d,e,f,g,h){return {data:[{document:{id:"YQC0GxIAACoATa-o",uid:"setup-graphql-api-in-react-next",url:a,type:"post_type",href:"https:\u002F\u002Fjsuu.cdn.prismic.io\u002Fapi\u002Fv2\u002Fdocuments\u002Fsearch?ref=YQC6mxIAACgATcyc&q=%5B%5B%3Ad+%3D+at%28document.id%2C+%22YQC0GxIAACoATa-o%22%29+%5D%5D",tags:["graphql","nextjs","appolo"],first_publication_date:"2021-07-28T01:35:48+0000",last_publication_date:"2021-07-28T01:49:08+0000",slugs:["setup-graphql-api-in-react-nextjs"],linked_documents:[],lang:e,alternate_languages:[],data:{title:[{type:d,text:"Setup Graphql API in React Nextjs",spans:[]}],post_excerpt:[{type:b,text:"How to setup a graphql API end point in Nextjs using Apollo Server Micro",spans:[]}],featured_img_link:{link_type:"Web",url:"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F1702\u002F1*r9ddttsmwik3BBYS8kXdfQ.png"},categories:{id:"YNawphIAAC4AUGic",type:"post_category",tags:[],slug:f,lang:e,first_publication_date:g,last_publication_date:g,uid:f,link_type:"Document",isBroken:false},sticky_post:true,body:[{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Using the pages\u002Fapi route we can add graphql end point in Nextjs. In order to achieve this we have to use *apollo-server-micro, express*. The API route will consume the server less function feature.",spans:[]}]}},{slice_type:h,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:d,text:"Problem",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"In most case, the methods that create the graphql server end up with errors. I have been tested those methods suggested by many youtubers, which end up with error, such as server can't access\u002Flocated . I tried the cors , and it didn't make it.",spans:[{start:172,end:199,type:"strong"}]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"Here is our full API for Nextjs route",spans:[]}]}},{slice_type:"code_slice",slice_label:a,items:[{}],primary:{cod_text_field:[{type:"preformatted",text:"\u002F\u002Fgrphql.js\nimport { gql, ApolloServer } from \"apollo-server-micro\";\r\nimport { PrismaClient } from \"@prisma\u002Fclient\";\r\nimport {\r\n  ApolloServerPluginLandingPageGraphQLPlayground,\r\n  ApolloServerPluginLandingPageDisabled,\r\n} from \"apollo-server-core\";\r\nconst prisma = new PrismaClient(); \r\n \r\n \r\nconst typeDefs = gql`\r\n  type Contact {\r\n    id: String\r\n    name: String\r\n    email: String\r\n  }\r\n\r\n  type Query {\r\n    contacts: [Contact]\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    contacts(_parent, _args, _context) {\r\n      return prisma.contact.findMany();\r\n    },\r\n  },\r\n};\r\n\r\nlet apolloServerHandler =(req, res) =\u003E Promise\r\nasync function startServer(req, res) {\r\n   const server =   new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    plugins: [\r\n      ApolloServerPluginLandingPageGraphQLPlayground({\r\n        \u002F\u002F options\r\n      }),\r\n    ],\r\n  }) ;\r\n  await server.start();\r\n  apolloServerHandler=   server.createHandler({path:'\u002Fapi\u002Fgraphql'}); \r\n  return apolloServerHandler;\r\n}\r\n\r\nexport default async (req,res)=\u003E{\r\n    const apolloServerHandler = await startServer();\r\n    return apolloServerHandler(req,res)\r\n}\r\n \r\nexport const config = { api: { bodyParser: false } };",spans:[]}]}},{slice_type:h,slice_label:a,items:[{}],primary:{header_rich_text_field:[{type:d,text:"Prisma ORM",spans:[]}]}},{slice_type:c,slice_label:a,items:[{}],primary:{paragraph_rich_text_field:[{type:b,text:"I also utilized the Prisma ORM for fetching real time data, if you wanna know, how to Prisma, check out the Next Prisma Guide.",spans:[]}]}}]}}}],fetch:{},mutations:[]}}(null,"paragraph","paragraph_slice","heading1","en-us","reactjs","2021-06-26T04:44:28+0000","heading_slice")));